#!/usr/bin/env python3
from contextlib import nullcontext
import socket
import requests
import datetime
import zipfile
from scan.dnsMap import nsScan, nsScanPage, subfinderSearch
from scan.nmapScan import scanNmap, scanVulnNmap
from scan.serviceScan import whatweb

from recogniseTypePage import wordPressChecker, otherPage, activeDirectoryChecker, nodePageChecker

from passComand import firtReportName, passCommand, zipResults

#get day
today= datetime.datetime.now()
timeStamp=today.strftime("%D")

# obtain ip
webpage = input("Introduce el dominio objetivo: ")
ip = socket.gethostbyname(webpage)
print(ip)

#report given
firtReportName(webpage,ip,timeStamp)

#scaneres
nsScan(webpage)
scanNmap(ip)

#serviceScan(webpage) #error with wp
whatweb(webpage)

#escaner basico nmap vulns
scanVulnNmap(ip)

#subdominios
subfinderSearch(webpage)

#analisis puerto por puerto vulnerabilidades
#buscar puertos usuales que se tratan -> generar json
    # http : 80 o https: 443
    # si http distinguir entre node y wp (nmap parametros ajustar)
    # active 389
    
    #usar bash o libreria
    
#seccionar la ip dependiendo del resultado
try:
    socket.inet_aton(ip)
except socket.error:
    print("La direcci贸n ip no es valida!")
    exit()
    
#Enviar una request a la direccion ip
r= requests.get("http://" + webpage)
isServerAdTitle='Microsoft-IIS/10.0'
print("\nEste es un tipo de servidor: "+str(r.headers)+"\n")
print("Headers: \n")

#Comprobar el estado de la respuesta
if r.status_code == 200 and r.headers["Server"]!=isServerAdTitle :
    nsScanPage(webpage,ip)
    #comprobar el contenido de la respuesta
    if r.headers["content-type"].startswith("text/html"):
        q=requests.get("http://"+webpage+"/wp-json")
        if q.status_code == 200:
            print("La direcci贸n ip pertenece a una pagina wordPress")
            wordPressChecker(ip, webpage)
        else:
            print("La direcci贸n ip pertenece a una pagina node, react o no wp")
            nodePageChecker(ip, webpage)
            otherPage(ip,webpage)
else:
    print("La direcci贸n ip no responde comprobaremos que es un AD")
    activeDirectoryChecker(ip,webpage)

#zip results
#passCommand('zip -r results_'+webpage+timeStamp+'.zip . -i ./ResultsAudit/')
zipf = zipfile.ZipFile('results_'+webpage+'.zip', 'w', zipfile.ZIP_DEFLATED)
zipResults('./ResultsAudit', zipf)
zipf.close()

passCommand('rm -rf ./ResultsAudit/')